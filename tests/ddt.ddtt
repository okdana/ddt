# vim: set ft=zsh:

plan:describe 'ddt(1) self-test'

beforePlan=''
afterPlan=''
beforeTest=''
afterTest=''

# If this test fails, the plan will be skipped as not having all of its
# pre-requisites met (similar to PHPUnit's @requires annotation)
plan:should_execute() {
	[[ -x "${0}" ]]
}

# This function is run after the plan is sourced but before any tests are
# executed. It affects the environment of the entire plan
plan:before_plan() {
	beforePlan='true'
}

# This function is run after all tests have executed. Again it affects the
# environment of the entire plan (though it is the last thing to run, so this
# isn't very useful)
plan:after_plan() {
	# This serves as a test of plan:before_plan(), plan:before_test(), and
	# plan:after_test() â€” the *test() ones should not be able to modify this
	# function's own environment
	[[ -n "${beforePlan}" ]]
	[[ -z "${beforeTest}" ]]
	[[ -z "${afterTest}"  ]]
}

# This function is run immediately before each test is executed. It affects only
# the environment of the current test
plan:before_test() {
	[[ -z "${beforeTest}" ]]
	beforeTest='true'
}

# This function is run immediately after each test is executed. Again it affects
# only the environment of the current test
plan:after_test() {
	[[ -z "${afterTest}" ]]
	afterTest='true'
	# This should have no effect on the outer plan environment
	beforePlan=
}

# Make sure that `ddt` passes a basic lint check
test:passes_lint_check() {
	bash -n "${0}"
}

# Make sure that `ddt -h` and `ddt --help` print long usage help text
test:prints_long_usage_help_with_-h() {
	"${0}" -h     | grep -qiF 'options:' &&
	"${0}" --help | grep -qiF 'options:'
}

# Make sure that `ddt -X` and `ddt --X` print brief usage help text
test:prints_brief_usage_help_with_-h() {
	"${0}" -X  2>&1 | grep -qiF 'usage:' &&
	"${0}" --X 2>&1 | grep -qiF 'usage:'
}

# Make sure that `ddt` supports FIFO-based test plans
test:correctly_handles_FIFO_plan() {
	"${0}" <( printf '%s\n' 'test:foo() { :; }' ) 2>&1 |
	grep -qiE 'foo.*PASS'
}

# Make sure that `ddt` gives an error when passed a file of invalid type
test:correctly_handles_invalid_type_plan() {
	if "${0}" /dev/null; then
		return 1
	else
		return 0
	fi
}

# Make sure that `ddt` gives an error when passed a file with invalid contents
test:correctly_handles_invalid_content_plan() {
	if "${0}" "${0}"; then
		return 1
	else
		return 0
	fi
}

# Make sure that plan:before_plan() gets run during tests
test:runs_plan:before__plan() {
	[[ -n "${beforePlan}" ]]
}

# Make sure that plan:before_test() gets run during tests, and that
# plan:after_test() can't affect the environment of the next test
test:runs_plan:before__test() {
	[[ -n "${beforeTest}" ]]
	[[ -z "${afterTest}"  ]]
}
